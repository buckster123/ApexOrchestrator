### Sandbox Root Structure for Apex Orchestrator

# Sandbox Root Structure for Apex Orchestrator

## Introduction
This is the root folder structure for a fresh backend sandbox setup, optimized for the Apex Orchestrator AI agent. The structure supports autonomous task execution across domains like code development, data analysis, research, file management, and knowledge synthesis. It emphasizes modularity, scalability, and efficiency, allowing seamless integration with available tools (e.g., file system operations, code execution, memory management, web search).

The design separates concerns: global configs and data from project-specific work, with Git repositories nested under `/projects/` to keep them isolated. This setup accommodates current functions and future use-cases, such as adding ML models or API integrations, without root clutter.

**Key Principles:**
- **Scalability**: Start lean; expand subfolders as needed (e.g., add `/projects/ml-experiment/`).
- **Tool Compatibility**: Paths are relative and short to minimize errors in tool calls (e.g., `fs_read_file("data/raw/sales.csv")`).
- **Persistence**: Use memory tools for quick state; FS for durable artifacts; prune temps/logs periodically.
- **Versioning**: No root Git; each project can init its own via `git_ops`.

Current year/timestamp: [Use `get_current_time` for dynamic updates]. 
Admin: André. 
The admin command "[SYSTEM: init]" triggers a first setup. And appends [INITIALIZED] to README.md.

## Folder Structure
Visualized as an ASCII tree for clarity. All paths are relative to `./sandbox/` (root).

```
sandbox_root/
├── README.md                  # This file: Overview, guidelines, quick-start. When active, "[INITIALIZED]" will be found at the start of the file.
├── .gitignore                 # Global ignores (e.g., *.tmp, logs/*, temp/*).
│
├── configs/                   # System configs (JSON/YAML for easy parsing).
│   ├── env.json               # Env vars (e.g., {"API_KEY": "placeholder", "DEFAULT_TOP_K": 5}).
│   ├── tools.yaml             # Tool presets (e.g., code_execution defaults: libraries to import).
│   └── memory_prefs.json      # EAMS settings (e.g., {"auto_prune_threshold": 0.3, "salience_decay": true}).
│
├── data/                      # Input/raw data; sub-process for workflows.
│   ├── raw/                   # Unprocessed uploads (e.g., CSVs, JSON dumps from api_simulate).
│   │   └── [subdirs: e.g., finance/, research/]  # Domain-specific organization.
│   ├── processed/             # Outputs from analysis (e.g., cleaned DataFrames as Parquet).
│   │   └── [e.g., trends.parquet, embeddings.json]
│   └── databases/             # Local DBs for structured data.
│       └── [e.g., task_logs.db, user_prefs.db]   # Use db_query for interactions.
│
├── projects/                  # Isolated workspaces; each can be a Git repo.
│   ├── [project-name]/        # E.g., "sales-analysis", "web-scraper".
│   │   ├── src/               # Core code (e.g., main.py; lint via code_lint).
│   │   ├── tests/             # Tests (e.g., unit_tests.py; run in code_execution).
│   │   ├── docs/              # Documentation (e.g., API.md).
│   │   ├── data/              # Local data (symlink to global /data/ if shared).
│   │   ├── outputs/           # Project results (e.g., report.pdf).
│   │   └── .git/              # Git internals (init with git_ops(operation="init")).
│   └── [add new via fs_mkdir("projects/new-project")]
│
├── scripts/                   # Reusable utilities (not project-bound).
│   ├── analysis/              # Data tools (e.g., plot_trends.py with matplotlib).
│   ├── utils/                 # Helpers (e.g., batch_fs.py for fs_* tools, mock_api.py).
│   └── workflows/             # Templates (e.g., react_agent.py for multi-agent sims).
│
├── outputs/                   # Global finals (from aggregation; archive old).
│   ├── reports/               # Summaries (e.g., task_report.md).
│   ├── visuals/               # Images/charts (e.g., trends.png from code_execution).
│   ├── exports/               # Bundles (e.g., results.zip via shell_exec).
│   └── archives/              # Snapshots (e.g., 2023-10-01_backup.tar.gz).
│
├── logs/                      # Traces for debugging (JSON/txt; consolidate via advanced_memory_*).
│   ├── tool_logs/             # Per-tool (e.g., code_execution_errors.log).
│   ├── agent_logs/            # Subagent outputs (e.g., retriever_results.json).
│   └── timestamps/            # Time-indexed (e.g., 2023-10-01T12:00:00.json from get_current_time).
│
└── temp/                      # Ephemeral; auto-clean on task end.
    ├── cache/                 # Tool temps (e.g., web_snippets.tmp from langsearch_web_search).
    └── scratch/               # Drafts (e.g., temp_code.py during iterations).
```

## Usage Guidelines
  - **File Operations**: Always use relative paths. Batch calls (e.g., `fs_mkdir` multiple dirs) to minimize iterations. Check existence with `fs_list_files` before writes.
  - **Project Creation**: For a new task, `fs_mkdir("projects/my-task")`, then init Git if needed: `git_ops(operation="init", repo_path="projects/my-task")`.
  - **Data Flow**: Ingest to `/data/raw/` → Process in `/projects/*/src/` (via code_execution) → Output to `/outputs/` or project `/outputs/`.
  - **Error Handling**: Logs capture ReAct cycles. If tool fails (e.g., invalid path), fallback to memory_* or abort with explanation.
  - **Cleanup**: Run `advanced_memory_prune()` post-task; use `shell_exec("rm -rf temp/*")` for temps. Prune logs if >1GB. 
  - **Security**: No external installs; mock APIs via api_simulate.
  - **Expansion**: For new domains (e.g., ML), add subfolders like `/projects/ml-model/models/`. Update the fs stored initialized README.md via `fs_write_file`.

## Next Steps
  - Initialize top-level folders if sandbox is not [INITIALIZED]: Run batched `fs_mkdir` on configs, data, etc. Append [INITIALIZED] to README.md at first setup.
  - Customize configs/ env.json for your setup.
  - For issues, query me: "Debug fs_write_file error" or "Expand structure for [domain]".

This structure ensures self-contained autonomy. Adapt as needed!
